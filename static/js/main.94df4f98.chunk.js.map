{"version":3,"sources":["getWeb3.js","components/Footer.js","components/NavBar.js","components/Content.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","on","location","reload","console","log","provider","providers","HttpProvider","Footer","className","React","Component","NavBar","changePage","this","props","addr","class","id","onClick","Content","balances","tokens","runStake","selectedPage","stakes","tokensInv","runUnstake","runClaim","rowsStake","tokenNamesIter","keys","i","tokenName","next","value","inputId","push","get","type","size","rowsUnstake","amount","tokenAddress","length","App","state","accounts","contract","Map","protocolToken","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","Staking","networks","instance","Contract","abi","address","methods","getProtocolTokenAddress","call","setState","runGetBalances","runGetStakes","alert","error","document","getElementById","stake","send","from","stakeId","unstake","claim","decimals","getUserBalance","balance","substring","substr","set","getUserStakes","pageId","classList","remove","add","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.94df4f98.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n\n          window.ethereum.on('accountsChanged', () => {\n            window.location.reload();\n          })\n\n          window.ethereum.on('chainChanged', () => {\n            window.location.reload();\n          })\n\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React from 'react';\n\nexport default class Footer extends React.Component {\n\n    render(){\n        return(\n            <div className=\"footer\">\n                <hr/>\n                <p>Alyra - Project n°4 : Staking DApp - Clément M. - Najib C. - Marielle D.</p> \n            </div>\n        )\n    }\n}","import React from 'react';\n\nexport default class NavBar extends React.Component {\n\n    render(){\n        const changePage = this.props.changePage;\n        const addr = this.props.addr;\n\n        return(\n            <div className=\"NavBar\">\n                <div class=\"p-3 bg-dark text-white text-center\">\n                    <h1>Staking DApp </h1>\n                        <p>Wallet: {addr}</p>\n                </div>\n\n                <nav class=\"navbar navbar-expand-sm navbar-dark bg-primary \">\n                    <div class=\"navbar-collapse collapse justify-content-center\" >\n                        <ul class=\"navbar-nav\">\n                            <li class=\"nav-item\"><button class=\"nav-link active\" id=\"page-stake\" onClick={()=>changePage(\"page-stake\")}>Stake</button>\n                            </li>\n\n                            <li><button class=\"nav-link\" id=\"page-my-stakes\" onClick={()=>changePage(\"page-my-stakes\")} >My stakes</button>\n                            </li>\n\n                            <li> <button class=\"nav-link\" id=\"page-about\" onClick={()=>changePage(\"page-about\")} >About</button>\n                            </li>\n                        </ul>\n                    </div>\n                </nav> \n            </div>\n        )\n    }\n}\n","import React from 'react';\n\nexport default class Content extends React.Component {\n\n    render(){\n        const balances = this.props.balances;\n        const tokens = this.props.tokens;\n        const runStake = this.props.runStake;\n        const selectedPage = this.props.selectedPage;\n\n        const stakes=this.props.stakes;\n        const tokensInv=this.props.tokensInv;\n        const runUnstake=this.props.runUnstake;\n        const runClaim=this.props.runClaim;\n\n        //build rows for the table in \"Stake\" tab\n        let rowsStake = [];\n        let tokenNamesIter = tokens.keys();\n        for (let i=0; i<tokens.size; i++){\n            let tokenName = tokenNamesIter.next().value;\n            let inputId = \"stake-\"+tokenName;\n\n            rowsStake.push(\n                <tr class=\"bg-white rounded shadow-sm\">\n                    <td>{tokenName}</td>\n                    <td>{balances.get(tokenName)}</td>\n                    <td>\n                        <div class=\"input-group\">\n                            <input type=\"text\" class=\"form-control\" id={inputId} />\n                            <button class=\"input-group-append btn btn-primary m-1\" onClick={()=>runStake(tokenName)}>Stake</button>\n                        </div>\n                    </td>\n                </tr>\n            )\n        }\n\n        //build rows for the table in \"My stakes\" tab\n        let rowsUnstake = [];\n        for (let i=0; i<stakes.length; i++){\n            if (stakes[i].amount !== \"0\"){\n            rowsUnstake.push(\n                <tr class=\"bg-white rounded shadow-sm\">\n                    <td>{tokensInv.get(stakes[i].tokenAddress)}</td> \n                    <td>{stakes[i].amount}</td>\n                    <td>\n                        <div class=\"input-group\">\n                            <button class=\"btn btn-primary m-1\" onClick={()=>runClaim(i)}>Claim reward</button>\n                            <button class=\"btn btn-primary m-1\" onClick={()=>runUnstake(i)}>Unstake</button>\n                        </div>\n                    </td>\n                </tr>\n            )}\n        }\n\n        //Diplay page \"Stake tokens\"\n        if (selectedPage === \"page-stake\"){\n            return(\n                <div className=\"Content\">\n                    <div class=\"container mt-3\">  \n                        <h1 class=\"m-5\">Stake tokens</h1>         \n                        <table class=\"table table-borderless\">\n                            <thead>\n                                <tr>\n                                    <th>Token</th>\n                                    <th>Balance</th>\n                                    <th>Amount to stake</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {rowsStake}\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            )\n        }\n\n        //Diplay page \"My tokens\"\n        else if (selectedPage === \"page-my-stakes\"){\n\n            if (rowsUnstake.length === 0){\n                return(\n                    <div className=\"Content\">\n                        <div class=\"container mt-3\">  \n                            <h1 class=\"m-5\">My stakes</h1> \n                            <p>You don't have any stakes yet.</p>\n                        </div>\n                    </div>\n                )\n            } \n\n            return(\n                <div className=\"Content\">\n                    <div class=\"container mt-3\">  \n                        <h1 class=\"m-5\">My stakes</h1> \n                        <table class=\"table table-borderless\">\n                            <thead>\n                                <tr>\n                                    <th>Token</th>\n                                    <th>Amout staked</th>\n                                    <th></th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {rowsUnstake}                            \n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            )\n        }\n\n        //Diplay page \"About\"\n        else {\n            return (\n                <div className=\"Content\">\n                    <div class=\"container mt-3\">  \n                        <h1 class=\"m-5\">About</h1> \n                            <p>Staking Dapp by Clément M., Najib C. and Marielle D.</p>\n                            <p>Stake your tokens and earn UniFi (UNF) tokens!</p>\n\n                            <p></p>\n                    </div>\n                </div>\n            )\n        }\n    }\n}","import React, { Component } from \"react\";\nimport Staking from \"./contracts/Staking.json\";\nimport getWeb3 from \"./getWeb3\";\nimport Footer from \"./components/Footer\";\nimport NavBar from \"./components/NavBar\";\nimport Content from \"./components/Content\";\n\n\nimport \"./App.css\";\n\nclass App extends Component {\n    state = {web3: null, accounts: null, contract: null, tokens: null, tokensInv: null, balances: new Map(), stakes: [], selectedPage: \"page-stake\", protocolToken: \"\"};\n\n    componentDidMount = async () => {\n        try {\n\n            const web3 = await getWeb3();\n            const accounts = await web3.eth.getAccounts();\n            const networkId = await web3.eth.net.getId();\n            const deployedNetwork = Staking.networks[networkId];\n            const instance = new web3.eth.Contract(\n                Staking.abi, \n                deployedNetwork && deployedNetwork.address,\n            );\n        \n            const protocolToken = await instance.methods.getProtocolTokenAddress().call();\n\n            // Tokens available in the app (/!\\ kovan addresses)\n            const tokens = new Map([\n                [\"UNF\", protocolToken],\n                [\"DAI\", \"0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa\"],\n                [\"UNI\", \"0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984\"]\n            ]);\n                \n            const tokensInv = new Map([\n                [protocolToken, \"UNF\"],\n                [\"0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa\", \"DAI\"],\n                [\"0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984\", \"UNI\"]\n            ]);\n            \n\n            this.setState({ web3, accounts, contract: instance, tokens,tokensInv, protocolToken});\n            this.runGetBalances();\n            this.runGetStakes();\n\n        } catch (error) {\n        alert(\n            `Failed to load web3, accounts, or contract. Check console for details.`,\n        );\n        console.error(error);\n        }\n    };\n\n    runStake = async (tokenName) => {\n        const { accounts, contract, tokens} = this.state;\n        const tokenAddress = tokens.get(tokenName);\n        const inputId = \"stake-\" + tokenName;\n        const amount = document.getElementById(inputId);\n\n        await contract.methods.stake(tokenAddress, amount.value).send({ from: accounts[0] });\n        amount.value = \"\";\n\n        this.runGetStakes();\n        this.runGetBalances();\n    };\n\n    runUnstake = async (stakeId) => {\n        const {contract, accounts} = this.state;\n        await contract.methods.unstake(stakeId).send({ from: accounts[0] });\n    \n        this.runGetStakes();\n        this.runGetBalances();\n    };\n\n    runClaim = async (stakeId) => {\n        const {contract, accounts} = this.state;\n        await contract.methods.claim(stakeId).send({ from: accounts[0] });\n    \n        this.runGetStakes();\n        this.runGetBalances();\n    };\n\n    runGetBalances = async () => {\n        const {contract, accounts, tokens} = this.state;\n\n        const balances = new Map();\n        let tokenNamesIter = tokens.keys();\n        const decimals = 18; //to replace with the real decimals\n\n        for (let i=0; i<tokens.size; i++){\n            let tokenName = tokenNamesIter.next().value;\n            let balance = await contract.methods.getUserBalance(accounts[0], tokens.get(tokenName)).call();\n\n            if (balance.length > 18){\n                balance = balance.substring(0, balance.length - decimals) + \".\" + balance.substr(balance.length - decimals);\n            }\n            else{\n                const n = \"0.000000000000000000\";\n                balance = n.substring(0, decimals + 2 - balance.length) + balance;\n            }\n            balances.set(tokenName, balance);\n        }\n\n        this.setState({balances});\n    };\n\n    runGetStakes = async () => {\n        const {contract, accounts} = this.state;\n        const stakes = await contract.methods.getUserStakes(accounts[0]).call({ from: accounts[0] });\n\n        this.setState({stakes});\n    }\n\n\n    changePage = (pageId) => {\n        document.getElementById(\"page-stake\").classList.remove(\"active\");\n        document.getElementById(\"page-my-stakes\").classList.remove(\"active\");\n        document.getElementById(\"page-about\").classList.remove(\"active\");\n\n        document.getElementById(pageId).classList.add(\"active\");\n\n        this.setState({selectedPage: pageId});\n    }\n\n    /*runHandleEvents = () => {\n        let options = {\n            filter: {value: []},\n            fromBlock: 'latest'\n        };\n        const {contract} = this.state;\n        let msg = \"\";\n\n        contract.events.Staked(options)\n        .on('data', event => {\n            msg = \"Success: \" + event.returnValues.amount + \" staked\";\n            alert(msg);\n        })\n        .on('error', err => console.log(err));\n\n        contract.events.Unstaked(options)\n        .on('data', event => {\n            msg = \"Success: \" + event.returnValues.amount + \" unstaked\";\n            alert(msg);\n        })\n        .on('error', err => console.log(err));\n\n        contract.events.Claimed(options)\n        .on('data', event => {\n            msg = \"Success: You earn \" + event.returnValues.amount + \" tokens\";\n            alert(msg);\n        })\n        .on('error', err => console.log(err));\n    }*/\n\n    render() {\n        if (!this.state.web3) {\n            return <div>Loading Web3, accounts, and contract...</div>;\n        }\n\n        return (\n            <div className=\"App\">\n                <NavBar \n                    addr={this.state.accounts[0]}\n                    changePage={this.changePage}\n                />\n                <Content\n                    balances={this.state.balances}\n                    tokens={this.state.tokens}\n                    selectedPage={this.state.selectedPage}\n                    stakes={this.state.stakes}\n                    tokensInv={this.state.tokensInv}\n                    \n                    runStake={this.runStake} \n                    runUnstake={this.runUnstake}\n                    runClaim={this.runClaim}\n                    \n                />\n                <Footer/>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}